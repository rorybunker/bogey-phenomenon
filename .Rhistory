incorrectPredictionsWElo <- length(results_final_test$correctPredictionWElo)-sum(results_final_test$correctPredictionWElo)
print(train_perc)
EloAccuracy <- sum(correctPredictionsElo)/(sum(incorrectPredictionsElo)+sum(correctPredictionsElo))
EloAccuracy*100
WEloAccuracy <- sum(correctPredictionsWElo)/(sum(incorrectPredictionsWElo)+sum(correctPredictionsWElo))
WEloAccuracy*100
library(welo)
#load data
load("/Users/rorybunker/Google Drive/Research/Tennis Prediction ML/data/Vincenzo Data/WElo supplementary material/atp_2005_2020.RData")
#clean data
Data_Clean <- clean(data.frame(db))
#convert date column string to date
Data_Clean$Date <- as.Date(Data_Clean$Date, "%d/%m/%Y")
#get first and last dates in the dataset 2005/07/05
train_start_date <- "2006-01-01" #min(Data_Clean$Date) #"2005-07-05"
train_end_date <- "2015-12-31"
test_start_date <- "2016-01-01"# as.Date(train_end_date) + 1
test_end_date <- "2016-12-31" #max(Data_Clean$Date) # max(Data_Clean$Date)
#create training and test sets
train <- Data_Clean[Data_Clean$Date >= train_start_date &
Data_Clean$Date < train_end_date,]
test <- Data_Clean[Data_Clean$Date >= test_start_date &
Data_Clean$Date < test_end_date,]
#percentage of dataset that is training
train_perc <- length(train$ID)/(length(test$ID)+length(train$ID))
#fit WElo to training dataset
res <- welofit(train)
#apply trained WElo model to test dataset
res_ld <- welofit(res, new_data = test)
results_final <- res_ld[["dataset"]]
results_final_test <- results_final[results_final$Date >= test_start_date &
results_final$Date < test_end_date,]
#determine whether prediction was correct or incorrect, and calculate accuracies of Elo and WElo
results_final_test$predictedWinnerElo <-
ifelse((results_final_test$Elo_pi_hat > (1-results_final_test$Elo_pi_hat)),
results_final_test$P_i,
results_final_test$P_j
)
results_final_test$predictedWinnerWElo <-
ifelse((results_final_test$WElo_pi_hat > (1-results_final_test$WElo_pi_hat)),
results_final_test$P_i,
results_final_test$P_j
)
results_final_test$correctPredictionWElo <-
ifelse((
results_final_test$predictedWinnerWElo == results_final_test$Winner
),
1,
0)
results_final_test$correctPredictionElo <-
ifelse((
results_final_test$predictedWinnerElo == results_final_test$Winner
),
1,
0)
correctPredictionsElo <- sum(results_final_test$correctPredictionElo)
incorrectPredictionsElo <- length(results_final_test$correctPredictionElo)-sum(results_final_test$correctPredictionElo)
correctPredictionsWElo <- sum(results_final_test$correctPredictionWElo)
incorrectPredictionsWElo <- length(results_final_test$correctPredictionWElo)-sum(results_final_test$correctPredictionWElo)
print(train_perc)
EloAccuracy <- sum(correctPredictionsElo)/(sum(incorrectPredictionsElo)+sum(correctPredictionsElo))
EloAccuracy*100
WEloAccuracy <- sum(correctPredictionsWElo)/(sum(incorrectPredictionsWElo)+sum(correctPredictionsWElo))
WEloAccuracy*100
library(welo)
#load data
load("/Users/rorybunker/Google Drive/Research/Tennis Prediction ML/data/Vincenzo Data/WElo supplementary material/atp_2005_2020.RData")
#clean data
Data_Clean <- clean(data.frame(db))
#convert date column string to date
Data_Clean$Date <- as.Date(Data_Clean$Date, "%d/%m/%Y")
#get first and last dates in the dataset 2005/07/05
train_start_date <- "2006-01-01" #min(Data_Clean$Date) #"2005-07-05"
train_end_date <- "2016-12-31"
test_start_date <- "2017-01-01"# as.Date(train_end_date) + 1
test_end_date <- "2017-12-31" #max(Data_Clean$Date) # max(Data_Clean$Date)
#create training and test sets
train <- Data_Clean[Data_Clean$Date >= train_start_date &
Data_Clean$Date < train_end_date,]
test <- Data_Clean[Data_Clean$Date >= test_start_date &
Data_Clean$Date < test_end_date,]
#percentage of dataset that is training
train_perc <- length(train$ID)/(length(test$ID)+length(train$ID))
#fit WElo to training dataset
res <- welofit(train)
#apply trained WElo model to test dataset
res_ld <- welofit(res, new_data = test)
results_final <- res_ld[["dataset"]]
results_final_test <- results_final[results_final$Date >= test_start_date &
results_final$Date < test_end_date,]
#determine whether prediction was correct or incorrect, and calculate accuracies of Elo and WElo
results_final_test$predictedWinnerElo <-
ifelse((results_final_test$Elo_pi_hat > (1-results_final_test$Elo_pi_hat)),
results_final_test$P_i,
results_final_test$P_j
)
results_final_test$predictedWinnerWElo <-
ifelse((results_final_test$WElo_pi_hat > (1-results_final_test$WElo_pi_hat)),
results_final_test$P_i,
results_final_test$P_j
)
results_final_test$correctPredictionWElo <-
ifelse((
results_final_test$predictedWinnerWElo == results_final_test$Winner
),
1,
0)
results_final_test$correctPredictionElo <-
ifelse((
results_final_test$predictedWinnerElo == results_final_test$Winner
),
1,
0)
correctPredictionsElo <- sum(results_final_test$correctPredictionElo)
incorrectPredictionsElo <- length(results_final_test$correctPredictionElo)-sum(results_final_test$correctPredictionElo)
correctPredictionsWElo <- sum(results_final_test$correctPredictionWElo)
incorrectPredictionsWElo <- length(results_final_test$correctPredictionWElo)-sum(results_final_test$correctPredictionWElo)
print(train_perc)
EloAccuracy <- sum(correctPredictionsElo)/(sum(incorrectPredictionsElo)+sum(correctPredictionsElo))
EloAccuracy*100
WEloAccuracy <- sum(correctPredictionsWElo)/(sum(incorrectPredictionsWElo)+sum(correctPredictionsWElo))
WEloAccuracy*100
library(welo)
#load data
load("/Users/rorybunker/Google Drive/Research/Tennis Prediction ML/data/Vincenzo Data/WElo supplementary material/atp_2005_2020.RData")
#clean data
Data_Clean <- clean(data.frame(db))
#convert date column string to date
Data_Clean$Date <- as.Date(Data_Clean$Date, "%d/%m/%Y")
#get first and last dates in the dataset 2005/07/05
train_start_date <- "2006-01-01" #min(Data_Clean$Date) #"2005-07-05"
train_end_date <- "2017-12-31"
test_start_date <- "2018-01-01"# as.Date(train_end_date) + 1
test_end_date <- "2018-12-31" #max(Data_Clean$Date) # max(Data_Clean$Date)
#create training and test sets
train <- Data_Clean[Data_Clean$Date >= train_start_date &
Data_Clean$Date < train_end_date,]
test <- Data_Clean[Data_Clean$Date >= test_start_date &
Data_Clean$Date < test_end_date,]
#percentage of dataset that is training
train_perc <- length(train$ID)/(length(test$ID)+length(train$ID))
#fit WElo to training dataset
res <- welofit(train)
#apply trained WElo model to test dataset
res_ld <- welofit(res, new_data = test)
results_final <- res_ld[["dataset"]]
results_final_test <- results_final[results_final$Date >= test_start_date &
results_final$Date < test_end_date,]
#determine whether prediction was correct or incorrect, and calculate accuracies of Elo and WElo
results_final_test$predictedWinnerElo <-
ifelse((results_final_test$Elo_pi_hat > (1-results_final_test$Elo_pi_hat)),
results_final_test$P_i,
results_final_test$P_j
)
results_final_test$predictedWinnerWElo <-
ifelse((results_final_test$WElo_pi_hat > (1-results_final_test$WElo_pi_hat)),
results_final_test$P_i,
results_final_test$P_j
)
results_final_test$correctPredictionWElo <-
ifelse((
results_final_test$predictedWinnerWElo == results_final_test$Winner
),
1,
0)
results_final_test$correctPredictionElo <-
ifelse((
results_final_test$predictedWinnerElo == results_final_test$Winner
),
1,
0)
correctPredictionsElo <- sum(results_final_test$correctPredictionElo)
incorrectPredictionsElo <- length(results_final_test$correctPredictionElo)-sum(results_final_test$correctPredictionElo)
correctPredictionsWElo <- sum(results_final_test$correctPredictionWElo)
incorrectPredictionsWElo <- length(results_final_test$correctPredictionWElo)-sum(results_final_test$correctPredictionWElo)
print(train_perc)
EloAccuracy <- sum(correctPredictionsElo)/(sum(incorrectPredictionsElo)+sum(correctPredictionsElo))
EloAccuracy*100
WEloAccuracy <- sum(correctPredictionsWElo)/(sum(incorrectPredictionsWElo)+sum(correctPredictionsWElo))
WEloAccuracy*100
library(welo)
#load data
load("/Users/rorybunker/Google Drive/Research/Tennis Prediction ML/data/Vincenzo Data/WElo supplementary material/atp_2005_2020.RData")
#clean data
Data_Clean <- clean(data.frame(db))
#convert date column string to date
Data_Clean$Date <- as.Date(Data_Clean$Date, "%d/%m/%Y")
#get first and last dates in the dataset 2005/07/05
train_start_date <- "2006-01-01" #min(Data_Clean$Date) #"2005-07-05"
train_end_date <- "2018-12-31"
test_start_date <- "2019-01-01"# as.Date(train_end_date) + 1
test_end_date <- "2019-12-31" #max(Data_Clean$Date) # max(Data_Clean$Date)
#create training and test sets
train <- Data_Clean[Data_Clean$Date >= train_start_date &
Data_Clean$Date < train_end_date,]
test <- Data_Clean[Data_Clean$Date >= test_start_date &
Data_Clean$Date < test_end_date,]
#percentage of dataset that is training
train_perc <- length(train$ID)/(length(test$ID)+length(train$ID))
#fit WElo to training dataset
res <- welofit(train)
#apply trained WElo model to test dataset
res_ld <- welofit(res, new_data = test)
results_final <- res_ld[["dataset"]]
results_final_test <- results_final[results_final$Date >= test_start_date &
results_final$Date < test_end_date,]
#determine whether prediction was correct or incorrect, and calculate accuracies of Elo and WElo
results_final_test$predictedWinnerElo <-
ifelse((results_final_test$Elo_pi_hat > (1-results_final_test$Elo_pi_hat)),
results_final_test$P_i,
results_final_test$P_j
)
results_final_test$predictedWinnerWElo <-
ifelse((results_final_test$WElo_pi_hat > (1-results_final_test$WElo_pi_hat)),
results_final_test$P_i,
results_final_test$P_j
)
results_final_test$correctPredictionWElo <-
ifelse((
results_final_test$predictedWinnerWElo == results_final_test$Winner
),
1,
0)
results_final_test$correctPredictionElo <-
ifelse((
results_final_test$predictedWinnerElo == results_final_test$Winner
),
1,
0)
correctPredictionsElo <- sum(results_final_test$correctPredictionElo)
incorrectPredictionsElo <- length(results_final_test$correctPredictionElo)-sum(results_final_test$correctPredictionElo)
correctPredictionsWElo <- sum(results_final_test$correctPredictionWElo)
incorrectPredictionsWElo <- length(results_final_test$correctPredictionWElo)-sum(results_final_test$correctPredictionWElo)
print(train_perc)
EloAccuracy <- sum(correctPredictionsElo)/(sum(incorrectPredictionsElo)+sum(correctPredictionsElo))
EloAccuracy*100
WEloAccuracy <- sum(correctPredictionsWElo)/(sum(incorrectPredictionsWElo)+sum(correctPredictionsWElo))
WEloAccuracy*100
library(welo)
#load data
load("/Users/rorybunker/Google Drive/Research/Tennis Prediction ML/data/Vincenzo Data/WElo supplementary material/atp_2005_2020.RData")
#clean data
Data_Clean <- clean(data.frame(db))
#convert date column string to date
Data_Clean$Date <- as.Date(Data_Clean$Date, "%d/%m/%Y")
#get first and last dates in the dataset 2005/07/05
train_start_date <- "2006-01-01" #min(Data_Clean$Date) #"2005-07-05"
train_end_date <- "2019-12-31"
test_start_date <- "2020-01-01"# as.Date(train_end_date) + 1
test_end_date <- "2020-12-31" #max(Data_Clean$Date) # max(Data_Clean$Date)
#create training and test sets
train <- Data_Clean[Data_Clean$Date >= train_start_date &
Data_Clean$Date < train_end_date,]
test <- Data_Clean[Data_Clean$Date >= test_start_date &
Data_Clean$Date < test_end_date,]
#percentage of dataset that is training
train_perc <- length(train$ID)/(length(test$ID)+length(train$ID))
#fit WElo to training dataset
res <- welofit(train)
#apply trained WElo model to test dataset
res_ld <- welofit(res, new_data = test)
results_final <- res_ld[["dataset"]]
results_final_test <- results_final[results_final$Date >= test_start_date &
results_final$Date < test_end_date,]
#determine whether prediction was correct or incorrect, and calculate accuracies of Elo and WElo
results_final_test$predictedWinnerElo <-
ifelse((results_final_test$Elo_pi_hat > (1-results_final_test$Elo_pi_hat)),
results_final_test$P_i,
results_final_test$P_j
)
results_final_test$predictedWinnerWElo <-
ifelse((results_final_test$WElo_pi_hat > (1-results_final_test$WElo_pi_hat)),
results_final_test$P_i,
results_final_test$P_j
)
results_final_test$correctPredictionWElo <-
ifelse((
results_final_test$predictedWinnerWElo == results_final_test$Winner
),
1,
0)
results_final_test$correctPredictionElo <-
ifelse((
results_final_test$predictedWinnerElo == results_final_test$Winner
),
1,
0)
correctPredictionsElo <- sum(results_final_test$correctPredictionElo)
incorrectPredictionsElo <- length(results_final_test$correctPredictionElo)-sum(results_final_test$correctPredictionElo)
correctPredictionsWElo <- sum(results_final_test$correctPredictionWElo)
incorrectPredictionsWElo <- length(results_final_test$correctPredictionWElo)-sum(results_final_test$correctPredictionWElo)
print(train_perc)
EloAccuracy <- sum(correctPredictionsElo)/(sum(incorrectPredictionsElo)+sum(correctPredictionsElo))
EloAccuracy*100
WEloAccuracy <- sum(correctPredictionsWElo)/(sum(incorrectPredictionsWElo)+sum(correctPredictionsWElo))
WEloAccuracy*100
import(welo)
library(welo)
showMethods('welo')
welo
welofit
library(welo)
View(welo)
View(welofit)
library(welo)
View(welo)
View(welofit)
View(tennis_data)
View(tennis_prob)
View(betting)
View(clean)
View(welo_plot)
data <- c(1565.20, 1572.10, 1683.10, 1724.01, 1753.23, 1757.63, 1782.45, 1788.80, 1802.22, 1810.22, 1840.79, 1840.89, 1840.89, 1841.07, 1841.48, 1844.70, 1870.11, 1870.14, 1870.14, 1874.20, 1883.83, 1900.60, 1955.23, 1956.50, 1957.78, 2026.38, 2030.83, 2038.93, 2045.44, 2063.22, 2064.32, 2073.59, 2073.92, 2099.30, 2103.24, 2126.75, 2133.10, 2133.10, 2136.91, 2141.51, 2141.51, 2147.00, 2153.17, 2161.05, 2167.58, 2195.35, 2203.25, 2212.07, 2216.29, 2220.76, 2229.75, 2232.70, 2244.42, 2245.79, 2246.47, 2248.53, 2263.96, 2265.86, 2265.86, 2267.06, 2284.28, 2284.28, 2284.28, 2284.28, 2304.18, 2310.45, 2317.09, 2321.13, 2321.13, 2321.13, 2321.13, 2326.74, 2332.56, 2335.99, 2339.55, 2354.67, 2356.14, 2357.97, 2366.86, 2366.86, 2366.86, 2373.82, 2376.04, 2376.39, 2379.72, 2379.72, 2382.29, 2384.01, 2394.81, 2399.23, 2401.16, 2412.50, 2413.23, 2418.32, 2431.66, 2435.47, 2440.88, 2440.88, 2449.72, 2450.08, 2450.08, 2458.18, 2468.50, 2477.72, 2481.76, 2485.83, 2496.14, 2505.34, 2514.57, 2521.22, 2523.76, 2523.76, 2523.76, 2542.19, 2542.19, 2542.19, 2542.19, 2579.03, 2643.52, 2652.72)
hist(data)
library(ggplot2)
hist(data, main="Histogram of My Data", xlab="Values"))
hist(data, main="Histogram of My Data", xlab="Values")
hist(data, main="Histogram of G-H SI1-SI2 0.5Ct Prices - Diamonds.co.nz", xlab="Values")
hist(data, main="Histogram of G-H SI1-SI2 0.5Ct Prices - Diamonds.co.nz", xlab="Price ($)")
hist(data, main="Histogram of G-H SI1-SI2 0.5Ct Prices : Diamonds.co.nz", xlab="Price ($)")
hist(data, main="Histogram of G-H SI1-SI2 0.5Ct Prices: Diamonds.co.nz", xlab="Price ($)")
hist(data, main="Histogram of G-H SI1-SI2 0.5Ct Prices: Diamonds.co.nz (14/4/23)", xlab="Price ($)")
min(data)
min(data[1:])
min(data[:])
min(data)
1565.2 + 1572.10
2643.52 + 2652.72
data <- (815.51,
data <- c(815.51, 849.81, 881.29, 893.04, 900.17, 922.99, 936.37, 944.24, 954.99, 974.32, 991.45, 994.6, 996.83, 1010.28, 1037.19, 1058.02, 1062.27, 1072.05, 1090.59, 1091.01, 1091.01, 1094.13, 1096.89, 1104.63, 1104.76, 1113.83, 1118.92, 1147.25, 1150.21, 1161.41, 1161.41, 1164.24)
hist(data, main="Histogram of G-H SI1-SI2 0.5Ct Prices: Diamonds.co.nz (14/4/23)", xlab="Price ($)")
hist(data, main="Histogram of G-H VS2-SI1 0.3ct Round Prices: Diamonds.co.nz (14/4/23)", xlab="Price ($)")
ggplot(data, aes(x=GK+No_GK, fill=c(rep("GK",length(handball_gk)), rep("No GK",length(handball_no_gk))))) +
geom_histogram(binwidth = 0.01, position="stack") +
scale_fill_manual(values=c("#E69F00","#56B4E9")) +
labs(title="Handball Fisheye Stacked Histogram", x="Shot Success Rate") +
theme_classic()
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
ggplot(data, aes(x=GK+No_GK, fill=c(rep("GK",length(handball_gk)), rep("No GK",length(handball_no_gk))))) +
geom_histogram(binwidth = 0.01, position="stack") +
scale_fill_manual(values=c("#E69F00","#56B4E9")) +
labs(title="Handball Fisheye Stacked Histogram", x="Shot Success Rate") +
theme_classic()
library(ggplot2)
handball_gk <- c(0.321989149, 0.320389907, 0.322119359, 0.323670753, 0.327771797, 0.322129242, 0.320093682, 0.313269348, 0.312014461, 0.320374835, 0.323039576, 0.317926664, 0.321264742, 0.318994788, 0.323834772, 0.32714405, 0.317493293, 0.322704992, 0.323663713, 0.320628577, 0.322212014, 0.325401624, 0.324872929, 0.309929788, 0.321600507, 0.321555586, 0.323938138, 0.314519243, 0.32354397, 0.321293956, 0.321486733, 0.311784149, 0.325389294, 0.31803412, 0.326214833, 0.321759628, 0.321653747, 0.325350523)
handball_no_gk <- c(0.31430624, 0.308790687, 0.310824073, 0.316279662, 0.31893894, 0.311820801, 0.312726262, 0.301610777, 0.299680307, 0.309719402, 0.314768472, 0.308986172, 0.309861804, 0.306906918, 0.313580593, 0.318140673, 0.30672823, 0.311934953, 0.315044583, 0.309086037, 0.31127606, 0.317009952, 0.317145809, 0.299333676, 0.312843124, 0.309682954, 0.314137832, 0.301100602, 0.314776721, 0.314435876, 0.31007011, 0.300029604, 0.314226425, 0.307417703, 0.316821555, 0.312840793, 0.308634106, 0.316099282)
data <- data.frame(GK=handball_gk, No_GK=handball_no_gk)
library(ggplot2)
ggplot(data, aes(x=GK+No_GK, fill=c(rep("GK",length(handball_gk)), rep("No GK",length(handball_no_gk))))) +
geom_histogram(binwidth = 0.01, position="stack") +
scale_fill_manual(values=c("#E69F00","#56B4E9")) +
labs(title="Handball Fisheye Stacked Histogram", x="Shot Success Rate") +
theme_classic()
#| label: aus-bowling-avg
#| warning: false
#| echo: false
# Fetch data
df <- fetch_cricinfo("ODI", "men", "bowling", country = "australia")
#| label: load-packages
#| include: false
library(moments)
library(cricketdata)
remove_missing_infinite <- function(x) {
x <- as.numeric(x)
x[x == Inf] <- NA
# Remove rows with missing or infinite values
complete_cases <- complete.cases(x)
x <- x[complete_cases]
return(x)
}
#| label: plot-norm-dist
#| warning: false
#| echo: false
# Generate random numbers from a normal distribution
set.seed(123)
data <- rnorm(10000, mean = 0, sd = 1)
# Plot a histogram of the data with frequency on the y-axis
hist(data, breaks = 30, freq = TRUE, col = "lightblue", border = "white",
xlab = "Value", ylab = "Frequency", main = "Normal Distribution")
#| label: aus-bowling-avg
#| warning: false
#| echo: false
# Fetch data
df <- fetch_cricinfo("ODI", "men", "bowling", country = "australia")
x <- df$Average
x <- remove_missing_infinite(x)
hist(x, main = "Histogram of Australian Men Bowling Averages")
abline(v = mean(x), col = "red", lwd = 2)
abline(v = median(x), col = "blue", lwd = 2)
# Adding a legend
legend("topright", legend = c("Mean", "Median"),
col = c("red", "blue"), lty = 2, lwd = 2)
print(paste("Mean:", mean(x)))
print(paste("Median:", median(x)))
print(paste("Skewness:", skewness(x)))
#| label: nz-end
#| warning: false
#| echo: false
# Fetch data
df <- fetch_cricinfo("ODI", "men", "bowling", country = "new zealand")
df <- df[df$End < 2023, ]
x <- df$End
x <- remove_missing_infinite(x)
hist(x, main = "Histogram of NZ Men ODI bowler years of retirement")
abline(v = mean(x), col = "red", lwd = 2)
abline(v = median(x), col = "blue", lwd = 2)
# Adding a legend
legend("topright", legend = c("Mean", "Median"),
col = c("red", "blue"), lty = 2, lwd = 2)
print(paste("Mean:", mean(x)))
print(paste("Median:", median(x)))
print(paste("Skewness:", skewness(x)))
#| label: nz-end
#| warning: false
#| echo: false
# Fetch data
df <- fetch_cricinfo("ODI", "men", "bowling", country = "new zealand")
df <- df[df$End < 2023, ]
x <- df$End
x <- remove_missing_infinite(x)
hist(x, main = "Histogram of NZ Men ODI bowler years of retirement", xlab="")
abline(v = mean(x), col = "red", lwd = 2)
abline(v = median(x), col = "blue", lwd = 2)
# Adding a legend
legend("topright", legend = c("Mean", "Median"),
col = c("red", "blue"), lty = 2, lwd = 2)
print(paste("Mean:", mean(x)))
print(paste("Median:", median(x)))
print(paste("Skewness:", skewness(x)))
#| label: nz-end
#| warning: false
#| echo: false
# Fetch data
df <- fetch_cricinfo("ODI", "men", "bowling", country = "new zealand")
df <- df[df$End < 2023, ]
x <- df$End
x <- remove_missing_infinite(x)
hist(x, main = "Histogram of NZ Men ODI bowler years of retirement", xlab="")
abline(v = mean(x), col = "red", lwd = 2)
abline(v = median(x), col = "blue", lwd = 2)
# Adding a legend
legend("topright", legend = c("Mean", "Median"),
col = c("red", "blue"), lty = 2, lwd = 2)
print(paste("Mean:", mean(x)))
print(paste("Median:", median(x)))
print(paste("Skewness:", skewness(x)))
#| label: aus-bowling-avg
#| warning: false
#| echo: false
# Fetch data
df <- fetch_cricinfo("ODI", "men", "bowling", country = "australia")
x <- df$Average
x <- remove_missing_infinite(x)
hist(x, main = "Histogram of Australian Men ODI Bowling Averages", xlab="")
abline(v = mean(x), col = "red", lwd = 2)
abline(v = median(x), col = "blue", lwd = 2)
# Adding a legend
legend("topright", legend = c("Mean", "Median"),
col = c("red", "blue"), lty = 2, lwd = 2)
print(paste("Mean:", mean(x)))
print(paste("Median:", median(x)))
print(paste("Skewness:", skewness(x)))
install.packages("devtools")
install.packages("remotes")
remotes::install_version("SDMTools", "1.1-221")
remotes::install_version("SDMTools", "1.1-221")
pkgbuild::check_build_tools(debug = TRUE)
?welo
??welo
Data_Clean <- read.csv("~/Google Drive/Research/Bogey Teams in Sport/bogey-phenomenon-sport/Data_Clean.csv")
View(Data_Clean)
Data_Clean
res<-welofit(Data_Clean)
library(welo)
res<-welofit(Data_Clean)
res
res$dataset
write.csv(data, file = "/Users/rorybunker/Google Drive/Research/Bogey Teams in Sport/Data_Clean_ATP_Elo_WElo.csv", row.names = FALSE)
write.csv(res$dataset, file = "/Users/rorybunker/Google Drive/Research/Bogey Teams in Sport/Data_Clean_ATP_Elo_WElo.csv", row.names = FALSE)
??welo
setwd("/Users/rorybunker/Google Drive/Research/Bogey Teams in Sport/bogey-phenomenon-sport")
library("welo")
rdata_file <- "./RData/atp_2005_2020.RData"
load(rdata_file)
rdata_file <- "./RData/wta_2007_2020.RData"
load(rdata_file)
View(db)
db_clean <- clean(db)
View(db_clean)
min(db_clean$Date)
max(db_clean$Date)
rdata_file <- "./RData/atp_2005_2020.RData"
load(rdata_file)
db_clean <- clean(db)
max(db_clean$Date)
min(db_clean$Date)
View(db)
View(db_clean)
min(as.Date(db_clean$Date))
as.Date(db_clean$Date)
?as.Date
rdata_file <- "./RData/wta_2007_2020.RData"
load(rdata_file)
db_clean <- clean(db)
rdata_file <- "./RData/wta_2007_2020.RData"
output_csv <- "Data_Clean_WTA2.csv"
load(rdata_file)
db_clean <- clean(db)
write.csv(db, output_csv, row.names=FALSE)
write.csv(db_clean, output_csv, row.names=FALSE)
